<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                         http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.lance.handler">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--扫描service-->
    <context:component-scan base-package="com.lance.service"/>

    <!--HandlerMapping 无需配置，SpringMVC可以默认启动-->


    <!--静态资源映射-->
    <!--本项目把静态资源放在了WEB-INF的子目录下，资源映射如下-->
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/images/**" location="/images/"/>

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <mvc:annotation-driven/>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!-- 默认的视图解析器在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <!--设置JSP文件的目录位置-->
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- SpringMVC文件上传需要配置的节点-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="20971500"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>


    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash; 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller &ndash;&gt;-->
            <!--<mvc:mapping path="/**" />-->
            <!--<mvc:exclude-mapping path="/user/login"/>-->
            <!--<bean class="com.lance.interceptor.LoginInterceptor">-->
                <!--&lt;!&ndash;定义不拦截的路径,前台不通过ajax访问的路径，都需要在这里&ndash;&gt;-->
                <!--<property name="uncheckUrls">-->
                    <!--<list>-->
                        <!--<value>/LanceBlog/blog/getBlog</value>-->
                        <!--<value>/LanceBlog/blog/getSecond</value>-->
                        <!--<value>/LanceBlog/images/fate.ico</value>-->
                        <!--<value>/LanceBlog/message/saveMessage</value>-->
                        <!--<value>/LanceBlog/user/code</value>-->
                        <!--<value>/LanceBlog/user/loginPage</value>-->
                    <!--</list>-->
                <!--</property>-->
            <!--</bean>-->

        <!--</mvc:interceptor>-->
            <!--&lt;!&ndash; 多个拦截器，顺序执行 &ndash;&gt;-->
            <!--<mvc:interceptor>-->
                <!--<mvc:mapping path="/background/**"/>-->
                <!--<bean class="com.lance.interceptor.LoginInterceptor"></bean>-->
            <!--</mvc:interceptor>-->

        <!--&lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 &ndash;&gt;-->
    <!--</mvc:interceptors>-->

    <!-- 支持返回json，用来处理json格式转换，避免IE执行ajax时，返回json出现下载文件 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list >
                <ref bean="mappingJacksonHttpMessageConverter" />
            </list>
        </property>
    </bean>
    <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
</beans>